/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package JogosLotoLivraria;

import JogosLotoLivraria.SocketCommunicationStruct;
import java.io.IOException;

/**
 *Classe que cria uma caixa de dialogo em Interface gráfica para informar ao utilizador que este deve aguardar qualquer coisa
 * @author William Salvaterra e Rui Oliveira
 *
 */
public class modalWait extends javax.swing.JDialog implements Runnable{
    private SocketCommunicationStruct socket_comm;
    /**
 *  Mensagem recebida
 */ 
    public  String mensagem_recebida;
    /**
 * True se Houve algum erro ao esperar por uma mensagem
 */ 
    public boolean conexao_Falhou;
    private int tempoEsperar; 
    /**
     * Construtor da Classe
     * @param parent Objeto Pai
     * @param modal Modal ou Nao
     * @param LoadingTexto Texto que aparecerá na label
     * @param BotaoTexto Texto que aparecerá no botao
     */
    public modalWait(java.awt.Frame parent, boolean modal, String LoadingTexto,String BotaoTexto) {
        super(parent, modal);
        initComponents();
        this.jProgressBar1.setString(LoadingTexto);
        this.jButtonCancelar.setText(BotaoTexto);
        conexao_Falhou = false;
        tempoEsperar = -1;
        super.setLocationRelativeTo(parent);
        super.setVisible(true);
    }
        /**
     * Construtor da Classe
     * @param parent Objeto Pai
     * @param modal Modal ou Nao
     * @param LoadingTexto Texto que aparecerá na label
     * @param tempoEsperar Tempo que limite para aguardar resposta do servidor
     */
    public modalWait(java.awt.Frame parent, boolean modal, String LoadingTexto,int tempoEsperar) {
        super(parent, modal);
        this.tempoEsperar = tempoEsperar;
        Thread t = new Thread(this);
        t.start();
        initComponents();
        this.jProgressBar1.setString(LoadingTexto);
        super.getContentPane().remove(jButtonCancelar);
        conexao_Falhou = false;

        super.setLocationRelativeTo(parent);
        super.setVisible(true);
    }
        /**
     * Construtor da Classe
     * @param parent Objeto Pai
     * @param modal Modal ou Nao
     * @param LoadingTexto Texto que aparecerá servidor
     * @param BotaoTexto Texto que aparecerá na label
     * @param socketcomm Socket usado para ler a mensagem
     */
    public modalWait(java.awt.Frame parent, boolean modal, String LoadingTexto,String BotaoTexto , SocketCommunicationStruct socketcomm) {
        super(parent, modal);
        this.socket_comm = socketcomm;
        
        Thread t = new Thread(this);
        t.start();
        initComponents();
        this.jProgressBar1.setString(LoadingTexto);
        this.jButtonCancelar.setText(BotaoTexto);
        tempoEsperar = -1;
        this.socket_comm = socketcomm;
        this.mensagem_recebida = null;
        super.setLocationRelativeTo(parent);  
        conexao_Falhou = false;
        super.setVisible(true);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jProgressBar1 = new javax.swing.JProgressBar();
        jButtonCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Aguarde...");
        setMinimumSize(new java.awt.Dimension(400, 100));
        setSize(new java.awt.Dimension(500, 100));
        setType(java.awt.Window.Type.POPUP);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jProgressBar1.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jProgressBar1.setIndeterminate(true);
        jProgressBar1.setString("[Texto]");
        jProgressBar1.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 30;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jProgressBar1, gridBagConstraints);

        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 10;
        getContentPane().add(jButtonCancelar, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton jButtonCancelar;
    private javax.swing.JProgressBar jProgressBar1;
    // End of variables declaration//GEN-END:variables
    /**
     * Método que retorna o tempo restante
 *
     * @return Tempo Restante
 */
    public int getTempoRestante(){
        return tempoEsperar;
    }
    
    /**
     *  Método executado numa thread diferente espera uma mensagem do servidor
 */
    @Override
    public void run() {
        //tempo é contado dessa forma para evitar que o utilizador carregue no X e "sabote" o tempo .  
        if(tempoEsperar> 1){
            while(tempoEsperar >= 0)
                try {
                    Thread.sleep(20);
                    tempoEsperar -=20;
                } catch (InterruptedException ex) {
                }
            dispose();
            return;
        }
        try {
            mensagem_recebida = socket_comm.esperarMSG();
        } catch (IOException ex) {
            conexao_Falhou = true;
        }

       dispose();
    }
}
